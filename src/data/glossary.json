{
  "nodes": [
    {
      "id": 1,
      "term": "Python",
      "definition": "Интерпретируемый объектно-ориентированный язык программирования высокого уровня с динамической типизацией, автоматическим управлением памятью и удобными высокоуровневыми структурами данных",
      "source": "Официальный сайт Python. URL: https://www.python.org/ (дата обращения: 08.12.2022)"
    },
    {
      "id": 2,
      "term": "Параллельное программирование",
      "definition": "Особый метод написания программ, при котором процесс решения целой задачи разделяется на несколько отдельных подзадач, которые будут выполняться одновременно на нескольких процессорах (ядрах) компьютера.",
      "source": "Воеводин В. В., Воеводин Вл. В. Параллельные вычисления. — СПб.: БХВ-Петербург, 2002. — 608 с. — ISBN 5-94157-160-7."
    },
    {
      "id": 3,
      "term": "Threading",
      "definition": "Модуль, упрощающий работу с потоками, позволяя программировать несколько операций одновременно. Лучше подходит для IO задач",
      "source": "Официальный сайт Python. URL: https://www.python.org/ (дата обращения: 08.12.2022)"
    },
    {
      "id": 4,
      "term": "Multiprocessing",
      "definition": "Модуль, упрощающий работу с процессами (интерпретаторами Python), позволяя программировать несколько операций одновременно. Лучше подходит для CPU-bound задач",
      "source": "Официальный сайт Python. URL: https://www.python.org/ (дата обращения: 08.12.2022)"
    },
    {
      "id": 5,
      "term": "Зеленые потоки",
      "definition": "Потоки эмулируемые виртуальной машиной или средой исполнения. Создание зелёного потока не подразумевает под собой создание реального потока ОС.",
      "source": "Stallings, William. Operating Systems, Internal and Design Principles. — New Jersey: Prentice Hall, 2008. — P. 171. — ISBN 9780136006329."
    },
    {
      "id": 6,
      "term": "GIL",
      "definition": "Глобальная блокировка интерпретатора — это механизм, обеспечивающий, при использовании интерпретатора CPython, безопасную работу с потоками",
      "source": "Зачем нужен Python Global Interpreter Lock и как он работает. URL: https://tproger.ru/translations/global-interpreter-lock-guide/  (дата обращения: 08.12.2022)"
    },
    {
      "id": 7,
      "term": "Конкурентное программирование",
      "definition": "Форма вычислений, при которой несколько вычислений выполняются одновременно — в течение перекрывающихся периодов времени — вместо последовательного — с завершением одного до начала следующего.",
      "source": "Воеводин В. В., Воеводин Вл. В. Параллельные вычисления. — СПб.: БХВ-Петербург, 2002. — 608 с. — ISBN 5-94157-160-7."
    },
    {
      "id": 8,
      "term": "Асинхронное программирование",
      "definition": "Вид параллельного программирования, в котором какая-либо единица работы может выполняться отдельно от основного потока выполнения приложения",
      "source": "Савостин, П. А. Практическое применение асинхронного программирования на языке Python при помощи пакета Asyncio / П. А. Савостин, Н. Э. Ефремова // Программные системы и вычислительные методы. – 2018. – № 2. – С. 11-16. (дата обращения: 17.11.2020)"
    },
    {
      "id": 9,
      "term": "asyncio",
      "definition": "Библиотека для написания асинхронного кода, не связанного с блокирующими вызовами, с использованием синтаксиса async/await. Предоставляет инструменты для создания асинхронных/параллельных приложений с использованием сопрограмм.",
      "source": "Перевод документации Python. URL: https://docs-python.ru/ (дата обращения: 23.12.2022)"
    },
    {
      "id": 10,
      "term": "anyio",
      "definition": "Библиотека для написания асинхронного кода, не связанного с блокирующими вызовами, с использованием синтаксиса async/await. Альтернативаная реализация.",
      "source": "Перевод документации Python. URL: https://docs-python.ru/ (дата обращения: 23.12.2022)"
    },
    {
      "id": 11,
      "term": "Веб-сервер",
      "definition": "Серверная программа, работающая в фоновом режиме, ожидающая запросы пользователей и выполняющая их обработку. Web-сервер принимает HTTP-запросы от клиентов (обычно web-браузеров) и возвращает им HTTP-ответы",
      "source": "Анатомия веб-сервиса URL: https://highload.guide/blog/inside-webserver.html (дата обращения: 24.03.2022)"
    },
    {
      "id": 12,
      "term": "WSGI",
      "definition": "Интерфейс для коммуникации между приложениями на Python и веб-серверами",
      "source": "PEP 333 (Предложение по развитию Python). URL: https://peps.python.org/pep-0333/ (дата обращения: 23.12.2022)"
    },
    {
      "id": 13,
      "term": "ASGI",
      "definition": "Интерфейс для коммуникации между приложениями и серверами с асинхронными возможностями. В отличие от синхронной реализации, позволяет ввести протоколы websocket и html 2.0",
      "source": "PEP 333 (Предложение по развитию Python). URL: https://peps.python.org/pep-0333/ (дата обращения: 23.12.2022)"
    }
  ]
}